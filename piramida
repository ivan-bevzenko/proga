package com.tsystems.javaschool.tasks.pyramid;

import com.sun.org.apache.xalan.internal.xsltc.util.IntegerArray;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class PyramidBuilder {

    /**
     * Builds a pyramid with sorted values (with minumum value at the top line and maximum at the bottom,
     * from left to right). All vacant positions in the array are zeros.
     *
     * @param inputNumbers to be used in the pyramid
     * @return 2d array with pyramid inside
     * @throws {@link CannotBuildPyramidException} if the pyramid cannot be build with given input
     */
    public int[][] buildPyramid(List<Integer> inputNumbers) {
        int[][] result;
        try {
            int n = inputNumbers.size();
            Collections.sort(inputNumbers);
            int m = checkAmountOfNumbers(n);
            if (m == 0) {
                throw new CannotBuildPyramidException();
            }
            int s = 2 * m - 1;
            result = new int[m][s];
            int it = 0;
            s /= 2;
            for (int i = 1; i <= m; i++) {
                for (int j = 0; j < i; j++) {
                    result[i - 1][s + j * 2] = inputNumbers.get(it++);
                }
                s--;
            }
        } catch (Exception e) {
            throw new CannotBuildPyramidException();
        }
        return result;
    }

    private int checkAmountOfNumbers(int n) {
        int d = n * 8 + 1;
        int sq = (int) Math.sqrt((double) d);
        if (sq * sq != d || (sq + 1) % 2 == 1) {
            return 0;
        }
        return (sq + 1) / 2 - 1;
    }

    private boolean checkSequence(List<Integer> inputNumbers) {
        int xorSum = 0;
        for (int i = 1; i <= inputNumbers.size(); i++) {
            xorSum ^= i;
            xorSum ^= inputNumbers.get(i);
        }
        return xorSum == 0;
    }


}
